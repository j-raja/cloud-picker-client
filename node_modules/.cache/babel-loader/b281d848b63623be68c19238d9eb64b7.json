{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\cloud-picker\\\\cloud-picker-client\\\\cloud-picker-client\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport { LinearProgress, ToggleButton, ToggleButtonGroup } from '@mui/material';\nimport awsLogo from './assets/aws.png';\nimport azureLogo from './assets/azure.png';\nimport digitaloceanLogo from './assets/digitalocean.png';\nimport googleLogo from './assets/google.png';\nimport upcloudLogo from './assets/upcloud.png';\nimport * as state from './state/state';\nimport { sortByDistance } from './utils/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar cloudProviders;\n\n(function (cloudProviders) {\n  cloudProviders[\"azure\"] = \"Microsoft Azure\";\n  cloudProviders[\"aws\"] = \"Amazon Web Services\";\n  cloudProviders[\"do\"] = \"DigitalOcean\";\n  cloudProviders[\"google\"] = \"Google Cloud Platform\";\n  cloudProviders[\"upcloud\"] = \"UpCloud\";\n})(cloudProviders || (cloudProviders = {}));\n\n;\n\nfunction App() {\n  _s();\n\n  const [clouds, setResponse] = React.useState(state.initialstate);\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState(\"\");\n  const [cloudProvider, setProvider] = React.useState(state.initialProvider);\n  const [filteredClouds, setFiltered] = React.useState(state.initialstate);\n  const [selectedCloud, setCloudSelection] = React.useState(state.initialCloudSelection); // Handle the state action for selecting a cloud provider\n\n  const handleSelectProvider = (event, provider) => {\n    setCloudSelection(state.initialCloudSelection);\n\n    if (provider === null) {\n      // Refresh selections and list\n      setProvider(state.initialProvider);\n      setFiltered(clouds);\n    } else {\n      // Select provider and filter cloud list\n      setProvider(provider);\n      const filtered = clouds.filter(cloud => cloud.provider === provider);\n      setFiltered(filtered);\n    }\n  }; // Handle the state action for selecting a cloud\n\n\n  const handleSelectCloud = (event, cloud) => {\n    if (cloud === null) {\n      setCloudSelection(state.initialCloudSelection);\n    } else {\n      setCloudSelection(cloud);\n    }\n  }; // Initialize app by getting the list of clouds\n\n\n  React.useEffect(() => {\n    axios.get('http://localhost:80/clouds', {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      sortByDistance(response.data.clouds).then(sortedList => {\n        setResponse(sortedList);\n        setFiltered(sortedList);\n        setLoading(false);\n      });\n    }).catch(ex => {\n      setError(ex.message);\n      setLoading(false);\n    });\n  }, []);\n  const cloudListRenderer = filteredClouds.map((cloud, i) => {\n    while (i < 10) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"clouds\",\n        children: /*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n          orientation: \"vertical\",\n          value: selectedCloud,\n          color: \"primary\",\n          size: \"large\",\n          exclusive: true,\n          onChange: handleSelectCloud,\n          children: /*#__PURE__*/_jsxDEV(ToggleButton, {\n            value: cloud,\n            sx: {\n              border: 'none'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                flexFlow: 'column wrap',\n                alignItems: 'flex-start'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cloud-name\",\n                children: cloud.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: cloud.description\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: cloud.region\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cloud-distance\",\n                children: [cloud.distance, \" km\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this);\n    }\n  });\n  const content = loading ? /*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 30\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"content\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"components\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"providers\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"component-header\",\n          children: \"Available Providers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ToggleButtonGroup, {\n          orientation: \"vertical\",\n          value: cloudProvider,\n          color: \"primary\",\n          size: \"large\",\n          exclusive: true,\n          onChange: handleSelectProvider,\n          children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n            className: \"toggle-button\",\n            sx: {\n              backgroundImage: `url(${azureLogo})`,\n              backgroundSize: 'contain',\n              backgroundRepeat: 'no-repeat',\n              backgroundPosition: 'center center'\n            },\n            value: \"azure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            className: \"toggle-button\",\n            sx: {\n              backgroundImage: `url(${awsLogo})`,\n              backgroundSize: 'contain',\n              backgroundRepeat: 'no-repeat',\n              backgroundPosition: 'center center'\n            },\n            value: \"aws\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            className: \"toggle-button\",\n            sx: {\n              backgroundImage: `url(${digitaloceanLogo})`,\n              backgroundSize: 'contain',\n              backgroundRepeat: 'no-repeat',\n              backgroundPosition: 'center center'\n            },\n            value: \"do\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            className: \"toggle-button\",\n            sx: {\n              backgroundImage: `url(${googleLogo})`,\n              backgroundSize: 'contain',\n              backgroundRepeat: 'no-repeat',\n              backgroundPosition: 'center center'\n            },\n            value: \"google\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ToggleButton, {\n            className: \"toggle-button\",\n            sx: {\n              backgroundImage: `url(${upcloudLogo})`,\n              backgroundSize: 'contain',\n              backgroundRepeat: 'no-repeat',\n              backgroundPosition: 'center center'\n            },\n            value: \"upcloud\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"selected-header\",\n            children: \"Selected Provider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: cloudProviders[cloudProvider]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"component-header\",\n          children: \"Top 10 closest clouds to your location\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), cloudListRenderer]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"component-header\",\n          children: \"Selected Cloud\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: selectedCloud.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: selectedCloud.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: cloudProviders[selectedCloud.provider]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App-header\",\n      children: \"Cloud Picker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"/pMnKZJ3HCf/Fp8NZHbaEDg8ch0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/Projects/cloud-picker/cloud-picker-client/cloud-picker-client/src/App.tsx"],"names":["React","axios","LinearProgress","ToggleButton","ToggleButtonGroup","awsLogo","azureLogo","digitaloceanLogo","googleLogo","upcloudLogo","state","sortByDistance","cloudProviders","App","clouds","setResponse","useState","initialstate","loading","setLoading","error","setError","cloudProvider","setProvider","initialProvider","filteredClouds","setFiltered","selectedCloud","setCloudSelection","initialCloudSelection","handleSelectProvider","event","provider","filtered","filter","cloud","handleSelectCloud","useEffect","get","headers","then","response","data","sortedList","catch","ex","message","cloudListRenderer","map","i","border","display","flexFlow","alignItems","name","description","region","distance","content","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios, { AxiosResponse } from 'axios';\nimport { LinearProgress, ToggleButton, ToggleButtonGroup } from '@mui/material';\nimport awsLogo from './assets/aws.png';\nimport azureLogo from './assets/azure.png';\nimport digitaloceanLogo from './assets/digitalocean.png';\nimport googleLogo from './assets/google.png';\nimport upcloudLogo from './assets/upcloud.png';\nimport { Cloud } from './interface';\nimport * as state from './state/state';\nimport { sortByDistance } from './utils/utils';\n\nenum cloudProviders { azure = 'Microsoft Azure', aws = 'Amazon Web Services', do = 'DigitalOcean', google = 'Google Cloud Platform', upcloud = 'UpCloud' };\n\nfunction App() {\n  const [clouds, setResponse] = React.useState(state.initialstate);\n  const [loading, setLoading]: [boolean, (loading: boolean) => void] = React.useState<boolean>(true);\n  const [error, setError]: [string, (error: string) => void] = React.useState(\"\");\n  const [cloudProvider, setProvider] = React.useState(state.initialProvider);\n  const [filteredClouds, setFiltered] = React.useState(state.initialstate);\n  const [selectedCloud, setCloudSelection] = React.useState(state.initialCloudSelection)\n\n  // Handle the state action for selecting a cloud provider\n  const handleSelectProvider = (event: any, provider: string) => {\n    setCloudSelection(state.initialCloudSelection);\n    if (provider === null) {\n      // Refresh selections and list\n      setProvider(state.initialProvider);\n      setFiltered(clouds);\n    }\n    else {\n      // Select provider and filter cloud list\n      setProvider(provider);\n      const filtered = clouds.filter(cloud => cloud.provider === provider);\n      setFiltered(filtered);\n    }\n  };\n\n  // Handle the state action for selecting a cloud\n  const handleSelectCloud = (event: any, cloud: Cloud) => {\n    if(cloud === null) {\n      setCloudSelection(state.initialCloudSelection);\n    }\n    else {\n      setCloudSelection(cloud);\n    }\n  }\n\n  // Initialize app by getting the list of clouds\n  React.useEffect(() => {\n    axios\n      .get<Cloud[]>('http://localhost:80/clouds', {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n      })\n      .then((response: AxiosResponse) => {\n        sortByDistance(response.data.clouds).then(sortedList => {\n          setResponse(sortedList);\n          setFiltered(sortedList);\n          setLoading(false);\n        })\n      })\n      .catch(ex => {\n        setError(ex.message);\n        setLoading(false);\n      });\n  }, []);\n\n  const cloudListRenderer = filteredClouds.map((cloud, i) => {\n    while (i < 10) {\n      return (\n        <div className=\"clouds\" key={i}>\n          <ToggleButtonGroup orientation=\"vertical\" value={selectedCloud} color=\"primary\" size=\"large\" exclusive onChange={handleSelectCloud}>\n            <ToggleButton value={cloud} sx={{ border: 'none' }}>\n              <div style={{ display: 'flex', flexFlow: 'column wrap', alignItems: 'flex-start' }}>\n                <div className='cloud-name' >\n                  {cloud.name}\n                </div>\n                <div>\n                  {cloud.description}\n                </div>\n                <div>\n                  {cloud.region}\n                </div>\n                <div className=\"cloud-distance\">\n                  {cloud.distance} km\n                </div>\n              </div>\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </div>\n      );\n    }\n  });\n\n  const content = loading ? (<LinearProgress></LinearProgress>) : (\n    <div className=\"content\">\n      <div className=\"components\">\n        <div className=\"providers\">\n          <p className=\"component-header\">Available Providers</p>\n          <ToggleButtonGroup orientation=\"vertical\" value={cloudProvider} color=\"primary\" size=\"large\" exclusive onChange={handleSelectProvider}>\n            <ToggleButton className=\"toggle-button\" sx={{ backgroundImage: `url(${azureLogo})`, backgroundSize: 'contain', backgroundRepeat: 'no-repeat', backgroundPosition: 'center center' }} value=\"azure\">\n            </ToggleButton>\n            <ToggleButton className=\"toggle-button\" sx={{ backgroundImage: `url(${awsLogo})`, backgroundSize: 'contain', backgroundRepeat: 'no-repeat', backgroundPosition: 'center center' }} value=\"aws\">\n            </ToggleButton>\n            <ToggleButton className=\"toggle-button\" sx={{ backgroundImage: `url(${digitaloceanLogo})`, backgroundSize: 'contain', backgroundRepeat: 'no-repeat', backgroundPosition: 'center center' }} value=\"do\">\n            </ToggleButton>\n            <ToggleButton className=\"toggle-button\" sx={{ backgroundImage: `url(${googleLogo})`, backgroundSize: 'contain', backgroundRepeat: 'no-repeat', backgroundPosition: 'center center' }} value=\"google\">\n            </ToggleButton>\n            <ToggleButton className=\"toggle-button\" sx={{ backgroundImage: `url(${upcloudLogo})`, backgroundSize: 'contain', backgroundRepeat: 'no-repeat', backgroundPosition: 'center center' }} value=\"upcloud\">\n            </ToggleButton>\n          </ToggleButtonGroup>\n          <div>\n            <p className=\"selected-header\">Selected Provider</p>\n            <p>{cloudProviders[cloudProvider as keyof typeof cloudProviders]}</p>\n          </div>\n        </div>\n        <div>\n          <p className=\"component-header\">Top 10 closest clouds to your location</p>\n          {cloudListRenderer}\n        </div>\n        <div>\n          <p className=\"component-header\">Selected Cloud</p>\n          <p>{selectedCloud.name}</p>\n          <p>{selectedCloud.description}</p>\n          <p>{cloudProviders[selectedCloud.provider as keyof typeof cloudProviders]}</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">Cloud Picker</div>\n      <div>{content}</div>\n      {error && <p className=\"error\">{error}</p>}\n    </div>\n  );\n\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}